<?php

/**
 * @file
 * Tests for drafty.module.
 */

/**
 * Defines a base class for testing Drafty revision support.
 */
class DraftyWebTestCase extends NodeWebTestCase {
  function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules[] = 'drafty';
    parent::setUp($modules);
  }

  /**
   * Make it easy for drafty_enforce to subclass.
   *
   * @param $entity
   *   An entity object.
   */
  protected function setRevision($entity) {
    $entity->revision = TRUE;
  }
}

/**
 * Test drafty revision support with a single entity.
 */
class DraftyTestCase extends DraftyWebTestCase {

  protected $type;

  public static function getInfo() {
    return array(
      'name' => 'Drafty',
      'description' => 'Test revision manipulation.',
      'group' => 'Drafty',
    );
  }


  /**
   * Create a node and check creation of draft and published revisions. 
   */
  function testDraftRevisions() {
    $node = new stdClass();
    $node->title = 'Title A';
    $node->type = 'article';
    $node->status = 1;
    $this->setRevision($node);
    node_save($node);

    // Save the vid for later comparison.
    $published_vid = $node->vid;

    // Save a new draft.
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Title A');
    $node->title = 'Title B';
    $this->setRevision($node);
    $node->is_draft_revision = TRUE;
    node_save($node);

    $draft_vid = $node->vid;
    // Confirm that the published and draft version IDs differ.
    $this->assertNotEqual($published_vid, $draft_vid);

    // Confirm that loading the node gets the published revision.
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Title A');

    drafty()->publishRevision('node', $node->nid, $draft_vid);

    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Title B');
    $this->assertNotEqual($node->vid, $draft_vid);
  }
}

/**
 * Test drafty revision support with field collections.
 */
class DraftyFieldCollectionTest extends DraftyWebTestCase {

  function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }
    $modules[] = 'field_collection';
    parent::setUp($modules);

    $field = array(
      'field_name' => 'field_collection_test',
      'type' => 'field_collection',
      'cardinality' => 5,
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'field_collection_test',
      'entity_type' => 'node',
      'bundle' => 'article',
    );
    field_create_instance($instance);

    // Add a text field to the field collection for more human readable testing.
    $field = array(
      'field_name' => 'field_fc_title',
      'type' => 'text',
    );
    field_create_field($field);

    $instance = array(
      'field_name' => 'field_fc_title',
      'entity_type' => 'field_collection_item',
      'bundle' => 'field_collection_test',
    );
    field_create_instance($instance);
  }

  protected $type;

  public static function getInfo() {
    return array(
      'name' => 'Drafty field collection',
      'description' => 'Test revision manipulation with field collections.',
      'group' => 'Drafty',
    );
  }

  function testDraftyFieldCollection() {
    // Create an initial node with no field collection content.
    $node = new stdClass();
    $node->title = 'Title A';
    $node->type = 'article';
    $node->status = 1;
    $this->setRevision($node);
    node_save($node);

    // Save the vid for later comparison.
    $published_vid = $node->vid;

    // Save a new draft of the node with the field collection field populated.
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Title A');
    $node->title = 'Title B';
    $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_collection_test'));
    $field_collection_item->field_fc_title[LANGUAGE_NONE][0]['value'] = 'FC Title A';
    $node->field_collection_test[LANGUAGE_NONE][0]['entity'] = $field_collection_item;
    $this->setRevision($node);
    $node->is_draft_revision = TRUE;
    node_save($node);

    $draft_vid = $node->vid;
    // Confirm that the published and draft version IDs differ.
    $this->assertNotEqual($published_vid, $draft_vid);

    // Confirm that loading the node gets the published revision.
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Title A');
    $this->assertEqual($node->field_collection_test, array());

    // Now publish the draft.
    drafty()->publishRevision('node', $node->nid, $draft_vid);

    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Title B');
    $fc_item = field_collection_item_load($node->field_collection_test[LANGUAGE_NONE][0]['value']);
    $this->assertEqual($fc_item->field_fc_title[LANGUAGE_NONE][0]['value'], 'FC Title A');
    $this->assertFalse($fc_item->archived);
    $this->assertNotEqual($node->vid, $draft_vid);

    // Now update the field collection with a new value for the text field.
    // Also add a new field collection.
    $fc_item->field_fc_title[LANGUAGE_NONE][0]['value'] = 'FC Title B';
    $node->field_collection_test[LANGUAGE_NONE][0]['entity'] = $fc_item;
    $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_collection_test'));
    $field_collection_item->field_fc_title[LANGUAGE_NONE][0]['value'] = 'FC Title C';
    $field_collection_item->setHostEntity('node', $node);
    $node->title = 'Title C';
    $this->setRevision($node);
    $node->is_draft_revision = TRUE;
    $node->field_collection_test[LANGUAGE_NONE][1]['entity'] = $field_collection_item;
    node_save($node);
    $this->assertFieldCollectionArchivedCount(1);
    $this->assertFieldCollectionNotArchivedCount(1);

    $new_draft_vid = $node->vid;
    $node = node_load($node->nid);
    // Ensure the version ID increments.
    $this->assertNotEqual($draft_vid, $new_draft_vid);
    $fc_item = field_collection_item_load($node->field_collection_test[LANGUAGE_NONE][0]['value']);
    $this->assertFalse($fc_item->archived);
    $this->assertEqual($fc_item->field_fc_title[LANGUAGE_NONE][0]['value'], 'FC Title A');
    // Ensure the second field collection is not populated in the published
    // revision.
    $this->assertTrue(!isset($node->field_collection_test[LANGUAGE_NONE][1]));

    // Publish the new draft.
    $vid = drafty()->publishRevision('node', $node->nid, $new_draft_vid);
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Title C');
    $fc_item = field_collection_item_load($node->field_collection_test[LANGUAGE_NONE][0]['value']);
    $this->assertFalse($fc_item->archived);
    $this->assertEqual($fc_item->field_fc_title[LANGUAGE_NONE][0]['value'], 'FC Title B');
    $fc_item = field_collection_item_load($node->field_collection_test[LANGUAGE_NONE][1]['value']);
    $this->assertFalse($fc_item->archived);
    $this->assertEqual($fc_item->field_fc_title[LANGUAGE_NONE][0]['value'], 'FC Title C');
    $this->assertFieldCollectionArchivedCount(0);
    $this->assertFieldCollectionNotArchivedCount(2);

    // The published version should also increment the version ID.
    $this->assertNotEqual($node->vid, $draft_vid);
    $this->assertNotEqual($node->vid, $new_draft_vid);
    $this->assertTrue($node->vid > $new_draft_vid);

    // Republish the old revision.
    drafty()->publishRevision('node', $node->nid, $draft_vid);
    $node = node_load($node->nid);
    $this->assertEqual($node->title, 'Title B');
    $fc_item = field_collection_item_load($node->field_collection_test[LANGUAGE_NONE][0]['value']);
    $this->assertEqual($fc_item->field_fc_title[LANGUAGE_NONE][0]['value'], 'FC Title A');
    $this->assertFalse($fc_item->archived);
    $this->assertTrue(!isset($node->field_collection_test[LANGUAGE_NONE][1]));
    $this->assertFieldCollectionArchivedCount(1);
    $this->assertFieldCollectionNotArchivedCount(1);
    $this->assertNotEqual($node->vid, $new_draft_vid);
    $this->assertNotEqual($node->vid, $draft_vid);

    // Explicitly load the non-default revision and confirm the field collection
    // is marked archived.
    $node = node_load($node->nid, $new_draft_vid);
    $fc_item = field_collection_item_load($node->field_collection_test[LANGUAGE_NONE][0]['value']);
    $this->assertEqual($fc_item->field_fc_title[LANGUAGE_NONE][0]['value'], 'FC Title A');
    $this->assertFalse($fc_item->archived);
    $fc_item = field_collection_item_load($node->field_collection_test[LANGUAGE_NONE][1]['value']);
    $this->assertEqual($fc_item->field_fc_title[LANGUAGE_NONE][0]['value'], 'FC Title C');
    $this->assertFalse($fc_item->archived);

    $this->assertFieldCollectionArchivedCount(1);
    $this->assertFieldCollectionNotArchivedCount(1);
  }

  protected function assertFieldCollectionArchivedCount($count) {
    $archived_count = db_query('SELECT COUNT(*) FROM {field_collection_item} WHERE archived = 1')->fetchField();
    $this->assertEqual($archived_count, $count);
  }
  protected function assertFieldCollectionNotArchivedCount($count) {
    $not_archived_count = db_query('SELECT COUNT(*) FROM {field_collection_item} WHERE archived = 0')->fetchField();
    $this->assertEqual($not_archived_count, $count);
  }


}

/**
 * Test draft revisions with entity translation.
 */
class DraftyEtTest extends  EntityTranslationTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Drafty Entity Translation',
      'description' => 'Test revision manipulation with entity translation',
      'group' => 'Drafty',
    );
  }

  function setUp() {
    parent::setUp('locale', 'entity_translation', 'drafty_enforce', 'drafty_1992010');
    $this->login($this->getAdminUser());
    $this->addLanguage('en');
    $this->addLanguage('es');
    $this->configureContentType();
    $this->login($this->getTranslatorUser());
  }

  /**
   * Test if field based translation works.
   *
   * Enable field based translation for basic pages. Add a field with a
   * cardinality higher than 1, to test if field_default_extract_form_values()
   * is invoked. Create a basic page and translate it.
   */
  function testFieldTranslation() {
    // Create Basic page in English.
    $node_title = $this->randomName();
    $node_body = $this->randomName();
    $node = $this->createPage($node_title, $node_body, 'en');
    $original_version = node_load($node->nid, NULL, TRUE);

    // Submit translation in Spanish.
    $node_translation_title = $this->randomName();
    $node_translation_body = $this->randomName();
    $node_translation = $this->createTranslation($node, $node_translation_title, $node_translation_body, 'es');
    $published_version = node_load($node->nid, NULL, TRUE);

    // At this point there should be three versions of the node:
    //  - the original version with no translation.
    //  - an unpublished version with a translation.
    //  - the published version with no translation, identical to the original.
    $this->assertTrue(!isset($original_version->body['es']), 'No Spanish translation on the original version');
    $this->assertTrue(!isset($published_version->body['es']), 'No Spanish translation on the published version');

    //  Drafty doesn't allow us to loading the draft revision while it's being
    //  created by design, so find it manually based on the two revisions IDs
    //  we know about.
    $vid = db_select('node_revision')
      ->fields('node_revision', array('vid'))
      ->condition('nid', $node->nid)
      ->condition('vid', array($original_version->vid, $published_version->vid), 'NOT IN')
      ->execute()->fetchField();

    $draft_version = node_load($node->nid, $vid);
    $this->assertTrue($draft_version->body['es'], 'Spanish translation on the draft version');

    // Now explicitly publish the draft.
    drafty()->publishRevision('node', $node->nid, $draft_version->vid);
    $new_published_version = node_load($node->nid, NULL, TRUE);
    $this->assertTrue($draft_version->body['es'], 'Spanish translation on the newly published version');

    // Now re-publish the original version, and ensure the translation is gone
    // again.
    drafty()->publishRevision('node', $node->nid, $original_version->vid);
    $re_published_original = node_load($node->nid, NULL, TRUE);
    $this->assertTrue(!isset($original_version->body['es']), 'No Spanish translation on the re-published original version');
  }
}
